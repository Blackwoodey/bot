from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

import os

# –°–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–æ–≤
ADMINS = {689955387, 791851827}

router = Router()

PROMPT_PATHS = {
    "prompt.txt": "prompt.txt",
    "stage2.txt": "prompts/stage2.txt",
    "stage3.txt": "prompts/stage3.txt",
    "stage3b.txt": "prompts/stage3b.txt",
    "stage4.txt": "prompts/stage4.txt"
}

class PromptEdit(StatesGroup):
    choosing = State()
    editing = State()

@router.message(Command("edit_prompt"))
async def edit_prompt_command(msg: Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        return await msg.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç—ã.")

    kb = InlineKeyboardBuilder()
    for key in PROMPT_PATHS:
        kb.button(text=key, callback_data=key)
    await msg.answer("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await state.set_state(PromptEdit.choosing)

@router.callback_query(PromptEdit.choosing)
async def show_current_prompt(callback: CallbackQuery, state: FSMContext):
    file_key = callback.data
    file_path = PROMPT_PATHS[file_key]
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            current_text = f.read()
    except Exception as e:
        return await callback.message.answer(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    await state.update_data(file_path=file_path)
    await callback.message.answer(
        f"üìÑ –°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–º—Ç:\n\n<code>{current_text[:3000]}</code>\n\n‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await state.set_state(PromptEdit.editing)
    await callback.answer()

@router.message(PromptEdit.editing, F.text)
async def save_new_prompt(msg: Message, state: FSMContext):
    data = await state.get_data()
    file_path = data.get("file_path")
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(msg.text)
        await msg.answer("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    await state.clear()
