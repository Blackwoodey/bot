from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

import os

# ‚úÖ –°–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–æ–≤
ADMINS = {689955387, 791851827}

router = Router()

# ‚úÖ –ö—Ä–∞—Ç–∫–∏–µ –∫–ª—é—á–∏ ‚Üí (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
PROMPT_PATHS = {
    "core": ("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç (gpt)", "prompt.txt"),
    "stage2": ("–≠—Ç–∞–ø 2: –≤–æ–ø—Ä–æ—Å", "prompts/stage2.txt"),
    "stage3": ("–≠—Ç–∞–ø 3: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", "prompts/stage3.txt"),
    "stage3b": ("–≠—Ç–∞–ø 3–±: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—É—Ç–∏", "prompts/stage3b.txt"),
    "stage4": ("–≠—Ç–∞–ø 4: –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ", "prompts/stage4.txt")
}

# ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PromptEdit(StatesGroup):
    choosing = State()
    editing = State()

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /edit_prompt
@router.message(Command("edit_prompt"))
async def edit_prompt_command(msg: Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        return await msg.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç—ã.")

    kb = InlineKeyboardBuilder()
    for key, (label, _) in PROMPT_PATHS.items():
        kb.button(text=label, callback_data=key)

    await msg.answer("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø—Ä–æ–º—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await state.set_state(PromptEdit.choosing)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
@router.callback_query(PromptEdit.choosing)
async def show_current_prompt(callback: CallbackQuery, state: FSMContext):
    file_key = callback.data
    if file_key not in PROMPT_PATHS:
        return await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª.")

    _, file_path = PROMPT_PATHS[file_key]

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            current_text = f.read()
    except Exception as e:
        return await callback.message.answer(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    await state.update_data(file_path=file_path)
    await callback.message.answer(
        f"üìÑ –°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–º—Ç:\n\n<code>{current_text[:3000]}</code>\n\n‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await state.set_state(PromptEdit.editing)
    await callback.answer()

# ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º—Ç–∞
@router.message(PromptEdit.editing, F.text)
async def save_new_prompt(msg: Message, state: FSMContext):
    data = await state.get_data()
    file_path = data.get("file_path")
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(msg.text)
        await msg.answer("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    await state.clear()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç"
@router.message(F.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç")
async def prompt_menu_button(msg: Message, state: FSMContext):
    await edit_prompt_command(msg, state)
