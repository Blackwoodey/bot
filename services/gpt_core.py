import os
from config import OPENAI_API_KEY, OPENAI_MODEL
from openai import OpenAI

# Удаляем возможные системные переменные прокси
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)

# Инициализируем клиента OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

SYSTEM_PROMPT = (
    "Ты — Архетипический Интеллект, обученный на архетипической системе Таро Тота (А. Кроули), "
    "в которой арканы трактуются как психологические и метафизические коды. Здесь 1 — Маг, 11 — Вожделение, 22 — Шут. "
    "Ты говоришь глубоко, мощно, как внутренний голос, без эзотерики и мистицизма. "

    "Твоя задача — получить три архетипа человека: Ядро, Страх и Реализация, и на их основе создать единое, глубокое архетипическое послание. "
    "Стиль — как в выверенных примерах: без заголовков, без списков, без номеров. Цельный, ритмичный, пророческий текст, в котором слышна трансформация. "
    "От Ядра — через Страх — к Перелому — к Реализации — к точному финальному вопросу. "

    "Формулируй без гендерной окраски. Не используй выражения вроде «тот, кто», «он», «она», «сама», «мужество», «по-женски». "
    "Пиши так, чтобы текст мог быть прочитан любым человеком и звучал как внутренний голос, не как внешняя речь. "

    "Финал — это перелом. Один вопрос, который вскрывает опору, разрушает старое и запускает внутреннее движение. "

    "Разбивай текст на логические абзацы. Каждый смысловой переход — с новой строки. "
    "В тексте должно быть минимум 3–5 абзацев. Это улучшает восприятие и подчёркивает структуру."
)

def generate_prophetic_text(core_text: str, fear_text: str, realization_text: str) -> str:
    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": f"{core_text}\n\n{fear_text}\n\n{realization_text}"}
            ],
            temperature=0.95
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Ошибка генерации: {e}"
