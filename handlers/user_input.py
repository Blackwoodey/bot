from aiogram import Router, types, F
from datetime import datetime
from aiogram.filters import Command
from services.calculator import calculate_archetypes
from services.textbase import get_text
from services.gpt_core import generate_prophetic_text
from services.logger import save_to_history

router = Router()

@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç. –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n11.02.1986"
    )

@router.message(F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
async def date_handler(message: types.Message):
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y")
        current_year = datetime.now().year

        if not (1900 <= birth_date.year <= current_year):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç 1900 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ üóìÔ∏è")
            return

        core, fear, realization = calculate_archetypes(message.text)

        core_text = get_text("core", core)
        fear_text = get_text("fear", fear)
        realization_text = get_text("realization", realization)

        # üßæ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ GPT
        print("\n=== –í–•–û–î –í GPT ===")
        print(f"CORE:\n{core_text}\n")
        print(f"FEAR:\n{fear_text}\n")
        print(f"REALIZATION:\n{realization_text}\n")
        print("==================\n")

        result = generate_prophetic_text(core_text, fear_text, realization_text)

        save_to_history(core_text, fear_text, realization_text, result)

        await message.answer(result)

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
