from aiogram import Router, types, F
from datetime import datetime
from aiogram.filters import Command
from services.calculator import calculate_archetypes
from services.textbase import get_text
from services.gpt_core import generate_prophetic_text
from services.logger import save_to_history
from services.detect_theme import detect_theme

router = Router()
user_context = {}

@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n11.02.1986"
    )

@router.message(F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
async def date_handler(message: types.Message):
    """
    1-–π —ç—Ç–∞–ø: –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É, –∑–∞–ø—É—Å–∫–∞–µ–º finetune-–º–æ–¥–µ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ
    —Å –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ–º + –≤–æ–ø—Ä–æ—Å–æ–º –≤ –∫–æ–Ω—Ü–µ.
    """
    user_id = message.from_user.id

    try:
        # 1) –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        birth_date = datetime.strptime(message.text, "%d.%m.%Y")
        current_year = datetime.now().year
        if not (1900 <= birth_date.year <= current_year):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç 1900 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ üóìÔ∏è")
            return

        # 2) –°—á–∏—Ç–∞–µ–º –∞—Ä—Ö–µ—Ç–∏–ø—ã (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö finetune)
        core, fear, realization = calculate_archetypes(message.text)
        core_text = get_text("core", core)
        fear_text = get_text("fear", fear)
        realization_text = get_text("realization", realization)

        # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π ¬´–ø—Ä–æ—Ä–æ—á–µ—Å–∫–∏–π¬ª —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º
        result = generate_prophetic_text(core_text, fear_text, realization_text)

        # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_to_history(core_text, fear_text, realization_text, result)

        # 5) –®–ª—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ —á–∞–Ω–∫–∞–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
        MAX_LEN = 4096
        for i in range(0, len(result), MAX_LEN):
            await message.answer(result[i : i + MAX_LEN])

        # 6) –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        user_context[user_id] = {
            "state": "awaiting_stage3",
            "birth_date": birth_date,
            "arch": None,
            "theme": None,
            "last_user_message": ""
        }

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –î–î.MM.–ì–ì–ì–ì.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
