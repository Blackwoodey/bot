from dotenv import load_dotenv
load_dotenv()
import asyncio
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import BOT_TOKEN
from handlers import user_input

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
@router.message(F.text == "/menu")
async def show_menu(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç")
async def prompt_change_request(message: Message):
    if str(message.from_user.id) not in ["791851827", "689955387"]:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ø—Ä–æ–º—Ç–∞.")
    
    try:
        with open("prompt.txt", "r", encoding="utf-8") as f:
            current_prompt = f.read()
    except Exception:
        current_prompt = "[–ü—Ä–æ–º—Ç –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω]"

    await message.answer(
        f"üìÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n\n{current_prompt}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º—Ç:",
        reply_markup=ReplyKeyboardRemove()
    )

    with open(".prompt_state", "w") as f:
        f.write(str(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
@router.message()
async def catch_prompt(message: Message):
    if not os.path.exists(".prompt_state"):
        return

    with open(".prompt_state", "r") as f:
        waiting_id = f.read().strip()

    if str(message.from_user.id) != waiting_id:
        return

    with open("prompt.txt", "w", encoding="utf-8") as f:
        f.write(message.text)

    os.remove(".prompt_state")
    await message.answer("–ü—Ä–æ–º—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ", reply_markup=main_keyboard)

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(user_input.router)
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
