from dotenv import load_dotenv
load_dotenv()

import asyncio
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from config import BOT_TOKEN
from handlers.stage3_direction import suggest_path_from_arch
from prompt_editor import router as prompt_editor_router

router = Router()
ADMINS = {"791851827", "689955387"}

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç")],
        [KeyboardButton(text="üå°Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–∞–π–º–µ—Ä—ã
user_context = {}
timeout_tasks = {}

@router.message(Command("menu"))
async def show_menu(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–∞ 2 (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞)
@router.message(F.text.startswith("–∞—Ä—Ö–µ—Ç–∏–ø: "))
async def handle_arch_setup(message: Message):
    arch = message.text.replace("–∞—Ä—Ö–µ—Ç–∏–ø: ", "").strip()
    user_id = message.from_user.id
    user_context[user_id] = {"arch": arch, "stage": 3}

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä ‚Äî —á–µ—Ä–µ–∑ 180 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∏–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in timeout_tasks:
        timeout_tasks[user_id].cancel()

    timeout_tasks[user_id] = asyncio.create_task(send_fallback_if_no_reply(user_id, arch))
    await message.answer("üåÄ –ê—Ä—Ö–µ—Ç–∏–ø –ø–æ–ª—É—á–µ–Ω. –ñ–¥—É —Ç–≤–æ–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞...")

# üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞)
@router.message()
async def handle_user_reply(message: Message):
    user_id = message.from_user.id
    ctx = user_context.get(user_id)

    if ctx and ctx.get("stage") == 3:
        arch = ctx["arch"]
        user_input = message.text

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if user_id in timeout_tasks:
            timeout_tasks[user_id].cancel()
            del timeout_tasks[user_id]

        reply = await suggest_path_from_arch(arch_name=arch, user_answer=user_input)
        await message.answer(reply)
        user_context[user_id]["stage"] = 4  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

async def send_fallback_if_no_reply(user_id: int, arch: str):
    await asyncio.sleep(180)
    reply = await suggest_path_from_arch(arch_name=arch, user_answer=None)
    await bot.send_message(chat_id=user_id, text=reply)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(router)
dp.include_router(prompt_editor_router)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
